<?php
$topdir = "../../..";
$title = "MPI_Type_create_f90_integer(3) man page (version 1.2.9)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->

</PRE>
<H2>NAME</H2><PRE>
       <B>MPI_Type_create_f90_integer</B> - Returns a bounded MPI integer datatype

</PRE>
<H2>SYNTAX</H2><PRE>

</PRE>
<H2>C Syntax</H2><PRE>
       #include &lt;mpi.h&gt;
       int MPI_Type_create_f90_integer(int <I>r</I>, MPI_Datatype *<I>newtype</I>)

</PRE>
<H2>Fortran Syntax</H2><PRE>
       INCLUDE 'mpif.h'
       MPI_TYPE_CREATE_F90_INTEGER (<I>R,</I> <I>NEWTYPE,</I> <I>IERROR</I>)
            INTEGER   <I>R,</I> <I>NEWTYPE,</I> <I>IERROR</I>

</PRE>
<H2>C++ Syntax</H2><PRE>
       #include &lt;mpi.h&gt;
       static MPI::Datatype MPI::Datatype::Create_f90_integer(int <I>r</I>)

</PRE>
<H2>INPUT PARAMETER</H2><PRE>
       r         Precision, in decimal digits (integer).

</PRE>
<H2>OUTPUT PARAMETERS</H2><PRE>
       newtype   New data type (handle).

       IERROR    Fortran only: Error status (integer).

</PRE>
<H2>DESCRIPTION</H2><PRE>
       This  function provides a way to declare KIND-parameterized INTEGER MPI
       datatypes. The argument is interpreted in a similar fashion to the  F90
       function  SELECTED_INT_KIND: <I>r</I> must be a scalar integer, and represents
       the desired level of numerical precision, in decimal digits.

</PRE>
<H2>NOTES</H2><PRE>
       It is erroneous to supply a value for <I>r</I> not supported by the  compiler.

       The  Fortran function SELECTED_INT_KIND maps a large number of <I>r</I> values
       to a much smaller number of KIND parameters supported by the  compiler.
       KIND parameters are not specified by the language and are not portable.
       From the point of view of the language, variables of the same base type
       and  KIND  parameter are equivalent, even if their KIND parameters were
       generated by different <I>r</I> arguments to  SELECTED_INT_KIND.  However,  to
       help facilitate interoperability in a heterogeneous environment, equiv-
       alency is more strictly defined for datatypes returned by MPI_Type_cre-
       ate_f90_integer.  Two  MPI  datatypes, each generated by this function,
       will match if and only if they have identical values for <I>r</I>.

       The interaction between the datatypes returned by this function and the
       external32   data   representation   -   used   by   <a href="../man3/MPI_Pack_external.3.php">MPI_Pack_external</a>,
       <a href="../man3/MPI_Unpack_external.3.php">MPI_Unpack_external</a> and many MPI_File functions - is subtle. The exter-
       nal32 representation of returned datatypes is as follows.

            if (<I>r</I> &gt; 38):
                 external32 size = 2
            else:
                 external32 size = 1

       If the external32 representation of a datatype is undefined, so are the
       results of using that datatype in operations that  require  the  exter-
       nal32  format.  Care  should be taken not to use incompatible datatypes
       indirectly, e.g., as part of another datatype or through  a  duplicated
       datatype, in these functions.

       If  a  variable is declared specifying a nondefault KIND value that was
       not obtained with SELECTED_INT_KIND (i.e., <I>r</I> is unknown), the only  way
       to  obtain  a  matching MPI datatype is to use the functions <a href="../man3/MPI_Sizeof.3.php">MPI_Sizeof</a>
       and <a href="../man3/MPI_Type_match_size.3.php">MPI_Type_match_size</a>.

</PRE>
<H2>ERRORS</H2><PRE>
       Almost all MPI routines return an error value; C routines as the  value
       of  the  function  and Fortran routines in the last argument. C++ func-
       tions do not return errors. If the default  error  handler  is  set  to
       MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism
       will be used to throw an MPI:Exception object.

       Before the error value is returned, the current MPI  error  handler  is
       called.  By  default, this error handler aborts the MPI job, except for
       I/O  function  errors.  The  error  handler   may   be   changed   with
       <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the predefined error handler MPI_ERRORS_RETURN
       may be used to cause error values to be returned. Note  that  MPI  does
       not guarantee that an MPI program can continue past an error.

       See the MPI man page for a full list of MPI error codes.

</PRE>
<H2>SEE ALSO</H2><PRE>
       <a href="../man3/MPI_Pack_external.3.php">MPI_Pack_external</a>
       <a href="../man3/MPI_Sizeof.3.php">MPI_Sizeof</a>
       <a href="../man3/MPI_Type_match_size.3.php">MPI_Type_match_size</a>
       <a href="../man3/MPI_Unpack_external.3.php">MPI_Unpack_external</a>
       SELECTED_INT_KIND

</PRE>
<H2>Open MPI 1.2                    SeptemberMPI_Type_create_f90_integer(3OpenMPI)</H2><PRE>
</PRE>

<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
