<?php
$topdir = "../../..";
$title = "MPI_Type_create_f90_real(3) man page (version 1.2.9)";

include_once("$topdir/doc/nav.inc");
include_once("$topdir/includes/header.inc");
?>
<p> <a href="../">&laquo; Return to documentation listing</a></p>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->

</PRE>
<H2>NAME</H2><PRE>
       <B>MPI_Type_create_f90_real</B> - Returns a bounded MPI real datatype

</PRE>
<H2>SYNTAX</H2><PRE>

</PRE>
<H2>C Syntax</H2><PRE>
       #include &lt;mpi.h&gt;
       int MPI_Type_create_f90_real(int <I>p</I>, int <I>r</I>, MPI_Datatype *<I>newtype</I>)

</PRE>
<H2>Fortran Syntax</H2><PRE>
       INCLUDE 'mpif.h'
       MPI_TYPE_CREATE_F90_REAL (<I>P,</I> <I>R,</I> <I>NEWTYPE,</I> <I>IERROR</I>)
            INTEGER   <I>P,</I> <I>R,</I> <I>NEWTYPE,</I> <I>IERROR</I>

</PRE>
<H2>C++ Syntax</H2><PRE>
       #include &lt;mpi.h&gt;
       static MPI::Datatype MPI::Datatype::Create_f90_real(int <I>p</I>, int <I>r</I>)

</PRE>
<H2>INPUT PARAMETERS</H2><PRE>
       p         Precision, in decimal digits (integer).

       r         Decimal exponent range (integer).

</PRE>
<H2>OUTPUT PARAMETERS</H2><PRE>
       newtype   New data type (handle).

       IERROR    Fortran only: Error status (integer).

</PRE>
<H2>DESCRIPTION</H2><PRE>
       This  function  provides  a  way to declare KIND-parameterized REAL MPI
       datatypes. The arguments are interpreted in a similar  fashion  to  the
       F90  function SELECTED_REAL_KIND. The parameters <I>p</I> and <I>r</I> must be scalar
       integers. The argument <I>p</I> represents the  required  level  of  numerical
       precision,  in  decimal  digits. The <I>r</I> parameter indicates the range of
       exponents desired: the returned datatype will have at least  one  expo-
       nent between +<I>r</I> and -<I>r</I> (inclusive).

       Either   <I>p</I>   or  <I>r</I>,  but  not  both,  may  be  omitted  from  calls  to
       SELECTED_REAL_KIND.  Similarly,  either   argument   to   MPI_Type_cre-
       ate_f90_real may be set to MPI_UNDEFINED.

</PRE>
<H2>NOTES</H2><PRE>
       It  is erroneous to supply values for <I>p</I> and <I>r</I> not supported by the com-
       piler.

       The Fortran function SELECTED_REAL_KIND maps a large  number  of  (<I>p,r</I>)
       pairs to a much smaller number of KIND parameters supported by the com-
       piler. KIND parameters are not specified by the language  and  are  not
       portable. From the point of view of the language, variables of the same
       base type and KIND parameter are equivalent, even if their KIND parame-
       ters were generated by different (<I>p,r</I>) arguments to SELECTED_REAL_KIND.
       However, to help facilitate interoperability in a  heterogeneous  envi-
       nal32 representation of returned datatypes is as follows.

            if (<I>p</I> &gt; 33) and/or (<I>r</I> &gt; 4931):
                 external32 size = n/a (undefined)
            else if (<I>p</I> &gt; 15) and/or (<I>r</I> &gt; 307):
                 external32 size = 16
            else if (<I>p</I> &gt; 6) and/or (<I>r</I> &gt; 37):
                 external32 size = 8
            else:
                 external32 size = 4

       If the external32 representation of a datatype is undefined, so are the
       results of using that datatype in operations that  require  the  exter-
       nal32  format.  Care  should be taken not to use incompatible datatypes
       indirectly, e.g., as part of another datatype or through  a  duplicated
       datatype, in these functions.

       If  a  variable is declared specifying a nondefault KIND value that was
       not obtained with SELECTED_REAL_KIND (i.e., <I>p</I> and/or  <I>r</I>  are  unknown),
       the  only way to obtain a matching MPI datatype is to use the functions
       <a href="../man3/MPI_Sizeof.3.php">MPI_Sizeof</a> and <a href="../man3/MPI_Type_match_size.3.php">MPI_Type_match_size</a>.

</PRE>
<H2>ERRORS</H2><PRE>
       Almost all MPI routines return an error value; C routines as the  value
       of  the  function  and Fortran routines in the last argument. C++ func-
       tions do not return errors. If the default  error  handler  is  set  to
       MPI::ERRORS_THROW_EXCEPTIONS, then on error the C++ exception mechanism
       will be used to throw an MPI:Exception object.

       Before the error value is returned, the current MPI  error  handler  is
       called.  By  default, this error handler aborts the MPI job, except for
       I/O  function  errors.  The  error  handler   may   be   changed   with
       <a href="../man3/MPI_Comm_set_errhandler.3.php">MPI_Comm_set_errhandler</a>; the predefined error handler MPI_ERRORS_RETURN
       may be used to cause error values to be returned. Note  that  MPI  does
       not guarantee that an MPI program can continue past an error.

       See the MPI man page for a full list of MPI error codes.

</PRE>
<H2>SEE ALSO</H2><PRE>
       <a href="../man3/MPI_Pack_external.3.php">MPI_Pack_external</a>
       <a href="../man3/MPI_Sizeof.3.php">MPI_Sizeof</a>
       <a href="../man3/MPI_Type_match_size.3.php">MPI_Type_match_size</a>
       <a href="../man3/MPI_Unpack_external.3.php">MPI_Unpack_external</a>
       SELECTED_REAL_KIND

</PRE>
<H2>Open MPI 1.2                    September 20MPI_Type_create_f90_real(3OpenMPI)</H2><PRE>
</PRE>

<p> <a href="../">&laquo; Return to documentation listing</a></p>
<?php
include_once("$topdir/includes/footer.inc");
