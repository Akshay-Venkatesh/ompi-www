<?php
$topdir = "../../../..";
# Note that we must use the PHP "$$" indirection to assign to the
# "title" variable, because if we list "$ title" (without the space)
# in this file, Doxygen will replace it with a string title.
$ver = basename(getcwd());
$thwarting_doxygen_preprocessor = "title";
$$thwarting_doxygen_preprocessor = "Portable Hardware Locality (hwloc) Documentation: $ver";
$header_include_file = "$topdir/projects/hwloc/doc/$ver/www.open-mpi.org-css.inc";

include_once("$topdir/projects/hwloc/nav.inc");
include_once("$topdir/includes/header.inc");
include_once("$topdir/includes/code.inc");
?>
<!-- Generated by Doxygen 1.7.4 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.php"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.php"><span>Modules</span></a></li>
      <li><a href="annotated.php"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
      <li><a href="globals.php"><span>Globals</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">hwloc.h File Reference</div>  </div>
</div>
<div class="contents">

<p>The hwloc API.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;hwloc/autogen/config.h&gt;</code><br/>
<code>#include &lt;sys/types.h&gt;</code><br/>
<code>#include &lt;stdio.h&gt;</code><br/>
<code>#include &lt;string.h&gt;</code><br/>
<code>#include &lt;limits.h&gt;</code><br/>
<code>#include &lt;hwloc/rename.h&gt;</code><br/>
<code>#include &lt;<a class="el" href="bitmap_8h_source.php">hwloc/bitmap.h</a>&gt;</code><br/>
<code>#include &lt;hwloc/cpuset.h&gt;</code><br/>
<code>#include &lt;<a class="el" href="helper_8h_source.php">hwloc/helper.h</a>&gt;</code><br/>
</div>
<p><a href="hwloc_8h_source.php">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structhwloc__obj__memory__s.php">hwloc_obj_memory_s</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Object memory.  <a href="structhwloc__obj__memory__s.php#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structhwloc__obj__memory__s_1_1hwloc__obj__memory__page__type__s.php">hwloc_obj_memory_s::hwloc_obj_memory_page_type_s</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Array of local memory page types, <code>NULL</code> if no local memory and <code>page_types</code> is 0.  <a href="structhwloc__obj__memory__s_1_1hwloc__obj__memory__page__type__s.php#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structhwloc__obj.php">hwloc_obj</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure of a topology object.  <a href="structhwloc__obj.php#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">union &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unionhwloc__obj__attr__u.php">hwloc_obj_attr_u</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Object type-specific Attributes.  <a href="unionhwloc__obj__attr__u.php#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structhwloc__obj__attr__u_1_1hwloc__cache__attr__s.php">hwloc_obj_attr_u::hwloc_cache_attr_s</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Cache-specific Object Attributes.  <a href="structhwloc__obj__attr__u_1_1hwloc__cache__attr__s.php#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structhwloc__obj__attr__u_1_1hwloc__group__attr__s.php">hwloc_obj_attr_u::hwloc_group_attr_s</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Group-specific Object Attributes.  <a href="structhwloc__obj__attr__u_1_1hwloc__group__attr__s.php#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structhwloc__distances__s.php">hwloc_distances_s</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Distances between objects.  <a href="structhwloc__distances__s.php#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structhwloc__obj__info__s.php">hwloc_obj_info_s</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Object info.  <a href="structhwloc__obj__info__s.php#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structhwloc__topology__discovery__support.php">hwloc_topology_discovery_support</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Flags describing actual discovery support for this topology.  <a href="structhwloc__topology__discovery__support.php#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structhwloc__topology__cpubind__support.php">hwloc_topology_cpubind_support</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Flags describing actual PU binding support for this topology.  <a href="structhwloc__topology__cpubind__support.php#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structhwloc__topology__membind__support.php">hwloc_topology_membind_support</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Flags describing actual memory binding support for this topology.  <a href="structhwloc__topology__membind__support.php#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structhwloc__topology__support.php">hwloc_topology_support</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set of flags describing actual support for this topology.  <a href="structhwloc__topology__support.php#details">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__api__version.php#ga8f4dfb8eef138af55dd1a0fa802e5476">HWLOC_API_VERSION</a>&#160;&#160;&#160;0x00010200</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicate at build time which hwloc API version is being used.  <a href="group__hwlocality__api__version.php#ga8f4dfb8eef138af55dd1a0fa802e5476"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct hwloc_topology *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Topology context.  <a href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="group__hwlocality__bitmap.php#gaa3c2bf4c776d603dcebbb61b0c923d84">hwloc_bitmap_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__sets.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A CPU set is a bitmap whose bits are set according to CPU physical OS indexes.  <a href="group__hwlocality__sets.php#ga4bbf39b68b6f568fb92739e7c0ea7801"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="group__hwlocality__bitmap.php#ga2fb1bbc8aea1ea22dee2f0fd39659f48">hwloc_const_bitmap_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__sets.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A non-modifiable <a class="el" href="group__hwlocality__sets.php#ga4bbf39b68b6f568fb92739e7c0ea7801" title="A CPU set is a bitmap whose bits are set according to CPU physical OS indexes.">hwloc_cpuset_t</a>.  <a href="group__hwlocality__sets.php#ga1f784433e9b606261f62d1134f6a3b25"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="group__hwlocality__bitmap.php#gaa3c2bf4c776d603dcebbb61b0c923d84">hwloc_bitmap_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__sets.php#ga37e35730fa7e775b5bb0afe893d6d508">hwloc_nodeset_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A node set is a bitmap whose bits are set according to NUMA memory node physical OS indexes.  <a href="group__hwlocality__sets.php#ga37e35730fa7e775b5bb0afe893d6d508"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="group__hwlocality__bitmap.php#ga2fb1bbc8aea1ea22dee2f0fd39659f48">hwloc_const_bitmap_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__sets.php#ga2f5276235841ad66a79bedad16a5a10c">hwloc_const_nodeset_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A non-modifiable <a class="el" href="group__hwlocality__sets.php#ga37e35730fa7e775b5bb0afe893d6d508" title="A node set is a bitmap whose bits are set according to NUMA memory node physical OS indexes...">hwloc_nodeset_t</a>.  <a href="group__hwlocality__sets.php#ga2f5276235841ad66a79bedad16a5a10c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="structhwloc__obj.php">hwloc_obj</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__objects.php#ga79b8ab56877ef99ac59b833203391c7d">hwloc_obj_t</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience typedef; a pointer to a struct <a class="el" href="structhwloc__obj.php" title="Structure of a topology object.">hwloc_obj</a>.  <a href="group__hwlocality__objects.php#ga79b8ab56877ef99ac59b833203391c7d"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a> { <br/>
&#160;&#160;<a class="el" href="group__hwlocality__types.php#ggacd37bb612667dc437d66bfb175a8dc55a3aa1b842d1fd4207ebce171f95a244ec">HWLOC_OBJ_SYSTEM</a>, 
<a class="el" href="group__hwlocality__types.php#ggacd37bb612667dc437d66bfb175a8dc55a3f4e83ffc4a259354959ae8a9eaa2a80">HWLOC_OBJ_MACHINE</a>, 
<a class="el" href="group__hwlocality__types.php#ggacd37bb612667dc437d66bfb175a8dc55aaf0964881117bdedf1a5e9332cd120dd">HWLOC_OBJ_NODE</a>, 
<a class="el" href="group__hwlocality__types.php#ggacd37bb612667dc437d66bfb175a8dc55a1ac6e07775ae4324b3fe9dbd72c785ec">HWLOC_OBJ_SOCKET</a>, 
<br/>
&#160;&#160;<a class="el" href="group__hwlocality__types.php#ggacd37bb612667dc437d66bfb175a8dc55a56ee0b7eca88f363b75b34fdde8c9ddc">HWLOC_OBJ_CACHE</a>, 
<a class="el" href="group__hwlocality__types.php#ggacd37bb612667dc437d66bfb175a8dc55ac793958f330bca371aa1535de8aff45f">HWLOC_OBJ_CORE</a>, 
<a class="el" href="group__hwlocality__types.php#ggacd37bb612667dc437d66bfb175a8dc55abca6887e80cb291353b0a0c1da83f661">HWLOC_OBJ_PU</a>, 
<a class="el" href="group__hwlocality__types.php#ggacd37bb612667dc437d66bfb175a8dc55a5269ef95be72f88465559d35c9b7ad56">HWLOC_OBJ_GROUP</a>, 
<br/>
&#160;&#160;<a class="el" href="group__hwlocality__types.php#ggacd37bb612667dc437d66bfb175a8dc55a19f8a6953fa91efc76bcbcdf2d22de4d">HWLOC_OBJ_MISC</a>, 
<a class="el" href="group__hwlocality__types.php#ggacd37bb612667dc437d66bfb175a8dc55addb5f843e1812445a84e6b2a844b1ebc">HWLOC_OBJ_TYPE_MAX</a>
<br/>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of topology object.  <a href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__types.php#ga46323568968005137c32f6a1cd405b74">hwloc_compare_types_e</a> { <a class="el" href="group__hwlocality__types.php#gga46323568968005137c32f6a1cd405b74a2f8297ea36eba46e7596e810a67298fb">HWLOC_TYPE_UNORDERED</a>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#gada025d3ec20b4b420f8038d23d6e7bde">hwloc_topology_flags_e</a> { <a class="el" href="group__hwlocality__configuration.php#ggada025d3ec20b4b420f8038d23d6e7bdea129b4fea1300be22bbaf0bb0958994c8">HWLOC_TOPOLOGY_FLAG_WHOLE_SYSTEM</a>, 
<a class="el" href="group__hwlocality__configuration.php#ggada025d3ec20b4b420f8038d23d6e7bdea6ecb6abc6a0bb75e81564f8bca85783b">HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM</a>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Flags to be set onto a topology context before load.  <a href="group__hwlocality__configuration.php#gada025d3ec20b4b420f8038d23d6e7bde">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__tinker.php#ga9d80f08eb25b7ac22f1b998dc8bf521f">hwloc_restrict_flags_e</a> { <a class="el" href="group__hwlocality__tinker.php#gga9d80f08eb25b7ac22f1b998dc8bf521fa4d18407f5520793b50b9e892f5bb55d1">HWLOC_RESTRICT_FLAG_ADAPT_DISTANCES</a>, 
<a class="el" href="group__hwlocality__tinker.php#gga9d80f08eb25b7ac22f1b998dc8bf521fa699969227a09bbc1a7de51dc9fb7be4b">HWLOC_RESTRICT_FLAG_ADAPT_MISC</a>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Flags to be given to <a class="el" href="group__hwlocality__tinker.php#gad75fa918e3eb54663bdeab25ed89b648" title="Restrict the topology to the given CPU set.">hwloc_topology_restrict()</a>.  <a href="group__hwlocality__tinker.php#ga9d80f08eb25b7ac22f1b998dc8bf521f">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__information.php#gaf4e663cf42bbe20756b849c6293ef575">hwloc_get_type_depth_e</a> { <a class="el" href="group__hwlocality__information.php#ggaf4e663cf42bbe20756b849c6293ef575a0565ab92ab72cb0cec91e23003294aad">HWLOC_TYPE_DEPTH_UNKNOWN</a>, 
<a class="el" href="group__hwlocality__information.php#ggaf4e663cf42bbe20756b849c6293ef575ae99465995cacde6c210d5fc2e409798c">HWLOC_TYPE_DEPTH_MULTIPLE</a>
 }</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__cpubinding.php#ga217dc8d373f8958cc93c154ebce1c71c">hwloc_cpubind_flags_t</a> { <a class="el" href="group__hwlocality__cpubinding.php#gga217dc8d373f8958cc93c154ebce1c71ca2e0dd0128dac6b03408c7dd170477fdc">HWLOC_CPUBIND_PROCESS</a>, 
<a class="el" href="group__hwlocality__cpubinding.php#gga217dc8d373f8958cc93c154ebce1c71caf1b6bbad00d7b1017b918e3719f4d421">HWLOC_CPUBIND_THREAD</a>, 
<a class="el" href="group__hwlocality__cpubinding.php#gga217dc8d373f8958cc93c154ebce1c71ca679a7e0f0c7ee06b123565f90d98e7fa">HWLOC_CPUBIND_STRICT</a>, 
<a class="el" href="group__hwlocality__cpubinding.php#gga217dc8d373f8958cc93c154ebce1c71ca41ce440443cc3087caed95ab60edcad6">HWLOC_CPUBIND_NOMEMBIND</a>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Process/Thread binding flags.  <a href="group__hwlocality__cpubinding.php#ga217dc8d373f8958cc93c154ebce1c71c">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> { <br/>
&#160;&#160;<a class="el" href="group__hwlocality__membinding.php#ggac9764f79505775d06407b40f5e4661e8a18675bb80ebc1bce5b652e9de8f3998c">HWLOC_MEMBIND_DEFAULT</a>, 
<a class="el" href="group__hwlocality__membinding.php#ggac9764f79505775d06407b40f5e4661e8a979c7aa78dd32780858f30f47a72cca0">HWLOC_MEMBIND_FIRSTTOUCH</a>, 
<a class="el" href="group__hwlocality__membinding.php#ggac9764f79505775d06407b40f5e4661e8ad811fa4b2a6002c4d63695a408ffde2c">HWLOC_MEMBIND_BIND</a>, 
<a class="el" href="group__hwlocality__membinding.php#ggac9764f79505775d06407b40f5e4661e8ae370075e5af016d42310f87ea5af236b">HWLOC_MEMBIND_INTERLEAVE</a>, 
<br/>
&#160;&#160;<a class="el" href="group__hwlocality__membinding.php#ggac9764f79505775d06407b40f5e4661e8afb37480fe5f4236eb7dd4aef26f691e9">HWLOC_MEMBIND_REPLICATE</a>, 
<a class="el" href="group__hwlocality__membinding.php#ggac9764f79505775d06407b40f5e4661e8aecdd4164d647708fbb51a00d98dbb138">HWLOC_MEMBIND_NEXTTOUCH</a>, 
<a class="el" href="group__hwlocality__membinding.php#ggac9764f79505775d06407b40f5e4661e8a3185bd869b67817fb2bd5164bf360402">HWLOC_MEMBIND_MIXED</a>
<br/>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Memory binding policy.  <a href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#gab00475fd98815bf4fb9aaf752030e7d2">hwloc_membind_flags_t</a> { <br/>
&#160;&#160;<a class="el" href="group__hwlocality__membinding.php#ggab00475fd98815bf4fb9aaf752030e7d2a1b1b74aef138f64aff214a8cbdfe8eb4">HWLOC_MEMBIND_PROCESS</a>, 
<a class="el" href="group__hwlocality__membinding.php#ggab00475fd98815bf4fb9aaf752030e7d2a1dc7dd5cdcd5796893a325a524555298">HWLOC_MEMBIND_THREAD</a>, 
<a class="el" href="group__hwlocality__membinding.php#ggab00475fd98815bf4fb9aaf752030e7d2a0335311a0ee04166df2888d52b4a42c6">HWLOC_MEMBIND_STRICT</a>, 
<a class="el" href="group__hwlocality__membinding.php#ggab00475fd98815bf4fb9aaf752030e7d2aa6e49e54f52827cb143cc869cfd748af">HWLOC_MEMBIND_MIGRATE</a>, 
<br/>
&#160;&#160;<a class="el" href="group__hwlocality__membinding.php#ggab00475fd98815bf4fb9aaf752030e7d2aad6b9eaf2ee324ca58dc8f58094b9997">HWLOC_MEMBIND_NOCPUBIND</a>
<br/>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Memory binding flags.  <a href="group__hwlocality__membinding.php#gab00475fd98815bf4fb9aaf752030e7d2">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__api__version.php#ga61ef7566efe550d314b0ce4f3421ec5d">hwloc_get_api_version</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicate at runtime which hwloc API version was used at build time.  <a href="group__hwlocality__api__version.php#ga61ef7566efe550d314b0ce4f3421ec5d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__types.php#gabd7da4f4ea12b420b8ecbde458b27805">hwloc_compare_types</a> (<a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a> type1, <a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a> type2) </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the depth of two object types.  <a href="group__hwlocality__types.php#gabd7da4f4ea12b420b8ecbde458b27805"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__creation.php#ga5c2d6f476af87005c7bd0811d4548b9f">hwloc_topology_init</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> *topologyp)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate a topology context.  <a href="group__hwlocality__creation.php#ga5c2d6f476af87005c7bd0811d4548b9f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__creation.php#ga91e2e6427b95fb7339c99dbbef996e71">hwloc_topology_load</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Build the actual topology.  <a href="group__hwlocality__creation.php#ga91e2e6427b95fb7339c99dbbef996e71"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__creation.php#ga6040925d3ee4bbb2647f2a321aca5f4b">hwloc_topology_destroy</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Terminate and free a topology context.  <a href="group__hwlocality__creation.php#ga6040925d3ee4bbb2647f2a321aca5f4b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__creation.php#gab3628b2a540a5a08e8cf724ef829e70a">hwloc_topology_check</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Run internal checks on a topology structure.  <a href="group__hwlocality__creation.php#gab3628b2a540a5a08e8cf724ef829e70a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#gaf2071c8621fddc53649c245d87835b47">hwloc_topology_ignore_type</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a> type)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Ignore an object type.  <a href="group__hwlocality__configuration.php#gaf2071c8621fddc53649c245d87835b47"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#ga6ddd4213d95bd1c30555b294a60efa6b">hwloc_topology_ignore_type_keep_structure</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a> type)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Ignore an object type if it does not bring any structure.  <a href="group__hwlocality__configuration.php#ga6ddd4213d95bd1c30555b294a60efa6b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#gaec6fb00050f50cd41007f1ae580d2106">hwloc_topology_ignore_all_keep_structure</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Ignore all objects that do not bring any structure.  <a href="group__hwlocality__configuration.php#gaec6fb00050f50cd41007f1ae580d2106"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#ga6d11e53db143ac39c32cdb3912b71f99">hwloc_topology_set_flags</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, unsigned long flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set OR'ed flags to non-yet-loaded topology.  <a href="group__hwlocality__configuration.php#ga6d11e53db143ac39c32cdb3912b71f99"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#ga2f6bfb6958d8b508ea1d7d5bb266432c">hwloc_topology_set_fsroot</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> restrict topology, const char *restrict fsroot_path)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the file-system root path when building the topology from sysfs/procfs.  <a href="group__hwlocality__configuration.php#ga2f6bfb6958d8b508ea1d7d5bb266432c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#gae1100de0162b3c6a9db750ac14629c05">hwloc_topology_set_pid</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> restrict topology, hwloc_pid_t pid)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change which pid the topology is viewed from.  <a href="group__hwlocality__configuration.php#gae1100de0162b3c6a9db750ac14629c05"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#ga2fcb52181b586c20f001b7a999550324">hwloc_topology_set_synthetic</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> restrict topology, const char *restrict description)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable synthetic topology.  <a href="group__hwlocality__configuration.php#ga2fcb52181b586c20f001b7a999550324"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#ga93efcc8a962afe1ed23393700682173f">hwloc_topology_set_xml</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> restrict topology, const char *restrict xmlpath)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable XML-file based topology.  <a href="group__hwlocality__configuration.php#ga93efcc8a962afe1ed23393700682173f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#gae7e4bade144652a2b48f5eaf0309b4ec">hwloc_topology_set_xmlbuffer</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> restrict topology, const char *restrict buffer, int size)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable XML based topology using a memory buffer (instead of a file, as with <a class="el" href="group__hwlocality__configuration.php#ga93efcc8a962afe1ed23393700682173f" title="Enable XML-file based topology.">hwloc_topology_set_xml()</a>).  <a href="group__hwlocality__configuration.php#gae7e4bade144652a2b48f5eaf0309b4ec"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#gabda6afa67a495cd652f064ad51d3fe47">hwloc_topology_set_distance_matrix</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> restrict topology, <a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a> type, unsigned nbobjs, unsigned *os_index, float *distances)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Provide a distance matrix.  <a href="group__hwlocality__configuration.php#gabda6afa67a495cd652f064ad51d3fe47"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> struct <br class="typebreak"/>
<a class="el" href="structhwloc__topology__support.php">hwloc_topology_support</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__configuration.php#gac2126e105f3ae708efca2e90d612625a">hwloc_topology_get_support</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> restrict topology)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve the topology support.  <a href="group__hwlocality__configuration.php#gac2126e105f3ae708efca2e90d612625a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__tinker.php#ga1c9d8e608232206ce2142fe806a6835b">hwloc_topology_export_xml</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, const char *xmlpath)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Export the topology into an XML file.  <a href="group__hwlocality__tinker.php#ga1c9d8e608232206ce2142fe806a6835b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__tinker.php#gad77e72a2ccf32825511818988a09e5c1">hwloc_topology_export_xmlbuffer</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, char **xmlbuffer, int *buflen)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Export the topology into a newly-allocated XML memory buffer.  <a href="group__hwlocality__tinker.php#gad77e72a2ccf32825511818988a09e5c1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> <a class="el" href="structhwloc__obj.php">hwloc_obj_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__tinker.php#ga017a9ba16d554326c6e3812d545d7230">hwloc_topology_insert_misc_object_by_cpuset</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__sets.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a> cpuset, const char *name)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a MISC object to the topology.  <a href="group__hwlocality__tinker.php#ga017a9ba16d554326c6e3812d545d7230"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> <a class="el" href="structhwloc__obj.php">hwloc_obj_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__tinker.php#gadacd7a3d21220fbb30c3256d8b22a294">hwloc_topology_insert_misc_object_by_parent</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="structhwloc__obj.php">hwloc_obj_t</a> parent, const char *name)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a MISC object as a leaf of the topology.  <a href="group__hwlocality__tinker.php#gadacd7a3d21220fbb30c3256d8b22a294"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__tinker.php#gad75fa918e3eb54663bdeab25ed89b648">hwloc_topology_restrict</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> restrict topology, <a class="el" href="group__hwlocality__sets.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a> cpuset, unsigned long flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Restrict the topology to the given CPU set.  <a href="group__hwlocality__tinker.php#gad75fa918e3eb54663bdeab25ed89b648"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__information.php#ga8c30b0cec55074eb3ed34e4f2a1a9937">hwloc_topology_get_depth</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> restrict topology) </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the depth of the hierarchical tree of objects.  <a href="group__hwlocality__information.php#ga8c30b0cec55074eb3ed34e4f2a1a9937"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__information.php#gaea7c64dd59467f5201ba87712710b14d">hwloc_get_type_depth</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a> type)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the depth of objects of type <code>type</code>.  <a href="group__hwlocality__information.php#gaea7c64dd59467f5201ba87712710b14d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> <a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__information.php#gadd4964764ae7e49231065d58a553fd31">hwloc_get_depth_type</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, unsigned depth) </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the type of objects at depth <code>depth</code>.  <a href="group__hwlocality__information.php#gadd4964764ae7e49231065d58a553fd31"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__information.php#ga20cfe2456f4cfdd789c9aca6d2fdd69f">hwloc_get_nbobjs_by_depth</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, unsigned depth) </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the width of level at depth <code>depth</code>.  <a href="group__hwlocality__information.php#ga20cfe2456f4cfdd789c9aca6d2fdd69f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static inline int <br class="typebreak"/>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__information.php#ga0131ab1051011fabfa69d7c1853e716c">hwloc_get_nbobjs_by_type</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a> type)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the width of level type <code>type</code>.  <a href="group__hwlocality__information.php#ga0131ab1051011fabfa69d7c1853e716c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__information.php#ga0d109e33fc7990f62f665d336e5e5111">hwloc_topology_is_thissystem</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> restrict topology) </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Does the topology context come from this system?  <a href="group__hwlocality__information.php#ga0d109e33fc7990f62f665d336e5e5111"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> <a class="el" href="structhwloc__obj.php">hwloc_obj_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__traversal.php#gaedd78240b0c1108355586a268ec5a697">hwloc_get_obj_by_depth</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, unsigned depth, unsigned idx) </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the topology object at logical index <code>idx</code> from depth <code>depth</code>.  <a href="group__hwlocality__traversal.php#gaedd78240b0c1108355586a268ec5a697"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static inline <br class="typebreak"/>
<a class="el" href="structhwloc__obj.php">hwloc_obj_t</a> <br class="typebreak"/>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__traversal.php#ga701f83b2cf0cb8e0acd58cd2dc1c67a2">hwloc_get_obj_by_type</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a> type, unsigned idx)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the topology object at logical index <code>idx</code> with type <code>type</code>.  <a href="group__hwlocality__traversal.php#ga701f83b2cf0cb8e0acd58cd2dc1c67a2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__conversion.php#ga7c61920feca6fd9006d930dabfc09058">hwloc_obj_type_string</a> (<a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a> type) </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a stringified topology object type.  <a href="group__hwlocality__conversion.php#ga7c61920feca6fd9006d930dabfc09058"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> <a class="el" href="group__hwlocality__types.php#gacd37bb612667dc437d66bfb175a8dc55">hwloc_obj_type_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__conversion.php#gade722091ae392fdc79557e797a16c370">hwloc_obj_type_of_string</a> (const char *string) </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an object type from the string.  <a href="group__hwlocality__conversion.php#gade722091ae392fdc79557e797a16c370"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__conversion.php#ga3ad856e8f3487d340c82a23b8a2a0351">hwloc_obj_type_snprintf</a> (char *restrict string, size_t size, <a class="el" href="structhwloc__obj.php">hwloc_obj_t</a> obj, int verbose)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Stringify the type of a given topology object into a human-readable form.  <a href="group__hwlocality__conversion.php#ga3ad856e8f3487d340c82a23b8a2a0351"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__conversion.php#ga0db8286d7f3ceda8defd76e3e1e2b284">hwloc_obj_attr_snprintf</a> (char *restrict string, size_t size, <a class="el" href="structhwloc__obj.php">hwloc_obj_t</a> obj, const char *restrict separator, int verbose)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Stringify the attributes of a given topology object into a human-readable form.  <a href="group__hwlocality__conversion.php#ga0db8286d7f3ceda8defd76e3e1e2b284"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__conversion.php#ga5c6a61a83f4790b421e2f62e9088446f">hwloc_obj_snprintf</a> (char *restrict string, size_t size, <a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="structhwloc__obj.php">hwloc_obj_t</a> obj, const char *restrict indexprefix, int verbose)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Stringify a given topology object into a human-readable form.  <a href="group__hwlocality__conversion.php#ga5c6a61a83f4790b421e2f62e9088446f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__conversion.php#gabbfb92224c992c0e2ecef6b6e45260f2">hwloc_obj_cpuset_snprintf</a> (char *restrict str, size_t size, size_t nobj, const <a class="el" href="structhwloc__obj.php">hwloc_obj_t</a> *restrict objs)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Stringify the cpuset containing a set of objects.  <a href="group__hwlocality__conversion.php#gabbfb92224c992c0e2ecef6b6e45260f2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static inline char <br class="typebreak"/>
*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__conversion.php#ga1f41387433f4c9e9c14b9f2e522919e4">hwloc_obj_get_info_by_name</a> (<a class="el" href="structhwloc__obj.php">hwloc_obj_t</a> obj, const char *name)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Search the given key name in object infos and return the corresponding value.  <a href="group__hwlocality__conversion.php#ga1f41387433f4c9e9c14b9f2e522919e4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__cpubinding.php#gaf4cc194d5c0d38004a21b9f03522a7e3">hwloc_set_cpubind</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__sets.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a> set, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind current process or thread on cpus given in bitmap <code>set</code>.  <a href="group__hwlocality__cpubinding.php#gaf4cc194d5c0d38004a21b9f03522a7e3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__cpubinding.php#gab52f83ab16eac465da55e16bdd30df77">hwloc_get_cpubind</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__sets.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a> set, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get current process or thread binding.  <a href="group__hwlocality__cpubinding.php#gab52f83ab16eac465da55e16bdd30df77"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__cpubinding.php#gac0ef3510b4e9c1273029ecf94e8c9686">hwloc_set_proc_cpubind</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, hwloc_pid_t pid, <a class="el" href="group__hwlocality__sets.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a> set, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind a process <code>pid</code> on cpus given in bitmap <code>set</code>.  <a href="group__hwlocality__cpubinding.php#gac0ef3510b4e9c1273029ecf94e8c9686"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__cpubinding.php#gaa1373a002b9a0a87eb002e26c590f2da">hwloc_get_proc_cpubind</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, hwloc_pid_t pid, <a class="el" href="group__hwlocality__sets.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a> set, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current binding of process <code>pid</code>.  <a href="group__hwlocality__cpubinding.php#gaa1373a002b9a0a87eb002e26c590f2da"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__cpubinding.php#ga8e9a4b5ee3eaa18fd3a229790c6b5b17">hwloc_get_last_cpu_location</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__sets.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a> set, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the last CPU where the current process or thread ran.  <a href="group__hwlocality__cpubinding.php#ga8e9a4b5ee3eaa18fd3a229790c6b5b17"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__cpubinding.php#ga1e005ddb9701e6a993a9eb8abe67a710">hwloc_get_proc_last_cpu_location</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, hwloc_pid_t pid, <a class="el" href="group__hwlocality__sets.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a> set, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the last CPU where a process ran.  <a href="group__hwlocality__cpubinding.php#ga1e005ddb9701e6a993a9eb8abe67a710"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#ga747962cbb16fd12ad6d126011c734a27">hwloc_set_membind_nodeset</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__sets.php#ga2f5276235841ad66a79bedad16a5a10c">hwloc_const_nodeset_t</a> nodeset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the default memory binding policy of the current process or thread to prefer the NUMA node(s) specified by <code>nodeset</code>.  <a href="group__hwlocality__membinding.php#ga747962cbb16fd12ad6d126011c734a27"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#ga8b6d1d90227aff8e44ef26bc1f8a8f95">hwloc_set_membind</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__sets.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a> cpuset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the default memory binding policy of the current process or thread to prefer the NUMA node(s) near the specified <code>cpuset</code>.  <a href="group__hwlocality__membinding.php#ga8b6d1d90227aff8e44ef26bc1f8a8f95"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#ga7b46a4ca0b2db9723ca73b0c148ccd93">hwloc_get_membind_nodeset</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__sets.php#ga37e35730fa7e775b5bb0afe893d6d508">hwloc_nodeset_t</a> nodeset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> *policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Query the default memory binding policy and locality of the current process or thread.  <a href="group__hwlocality__membinding.php#ga7b46a4ca0b2db9723ca73b0c148ccd93"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#gab07aedba1119f99130e5f0b796b7d8a5">hwloc_get_membind</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, <a class="el" href="group__hwlocality__sets.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a> cpuset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> *policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Query the default memory binding policy and locality of the current process or thread (the locality is returned in <code>cpuset</code> as CPUs near the locality's actual NUMA node(s)).  <a href="group__hwlocality__membinding.php#gab07aedba1119f99130e5f0b796b7d8a5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#gaf10d18cd4703ec980d7440a1c23fa07f">hwloc_set_proc_membind_nodeset</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, hwloc_pid_t pid, <a class="el" href="group__hwlocality__sets.php#ga2f5276235841ad66a79bedad16a5a10c">hwloc_const_nodeset_t</a> nodeset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the default memory binding policy of the specified process to prefer the NUMA node(s) specified by <code>nodeset</code>.  <a href="group__hwlocality__membinding.php#gaf10d18cd4703ec980d7440a1c23fa07f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#gac63c4517e71b3f0d41b3dee3e83dc55c">hwloc_set_proc_membind</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, hwloc_pid_t pid, <a class="el" href="group__hwlocality__sets.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a> cpuset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the default memory binding policy of the specified process to prefer the NUMA node(s) near the specified <code>cpuset</code>.  <a href="group__hwlocality__membinding.php#gac63c4517e71b3f0d41b3dee3e83dc55c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#ga22074ed072e1039f74f17f7b16e9e39d">hwloc_get_proc_membind_nodeset</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, hwloc_pid_t pid, <a class="el" href="group__hwlocality__sets.php#ga37e35730fa7e775b5bb0afe893d6d508">hwloc_nodeset_t</a> nodeset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> *policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Query the default memory binding policy and locality of the specified process.  <a href="group__hwlocality__membinding.php#ga22074ed072e1039f74f17f7b16e9e39d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#gabaf9c13f1fa301d6895594cec52226e2">hwloc_get_proc_membind</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, hwloc_pid_t pid, <a class="el" href="group__hwlocality__sets.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a> cpuset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> *policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Query the default memory binding policy and locality of the specified process (the locality is returned in <code>cpuset</code> as CPUs near the locality's actual NUMA node(s)).  <a href="group__hwlocality__membinding.php#gabaf9c13f1fa301d6895594cec52226e2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#gade5e2c28ea8475a479bf2b1df36c6ccd">hwloc_set_area_membind_nodeset</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, const void *addr, size_t len, <a class="el" href="group__hwlocality__sets.php#ga2f5276235841ad66a79bedad16a5a10c">hwloc_const_nodeset_t</a> nodeset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind the already-allocated memory identified by (addr, len) to the NUMA node(s) in <code>nodeset</code>.  <a href="group__hwlocality__membinding.php#gade5e2c28ea8475a479bf2b1df36c6ccd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#ga06594edeb4728cb9e014aed924d1e74a">hwloc_set_area_membind</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, const void *addr, size_t len, <a class="el" href="group__hwlocality__sets.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a> cpuset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind the already-allocated memory identified by (addr, len) to the NUMA node(s) near <code>cpuset</code>.  <a href="group__hwlocality__membinding.php#ga06594edeb4728cb9e014aed924d1e74a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#ga106e6fcd764d17be682faf7a5bc95720">hwloc_get_area_membind_nodeset</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, const void *addr, size_t len, <a class="el" href="group__hwlocality__sets.php#ga37e35730fa7e775b5bb0afe893d6d508">hwloc_nodeset_t</a> nodeset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> *policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Query the NUMA node(s) and binding policy of the memory identified by (<code>addr</code>, <code>len</code> ).  <a href="group__hwlocality__membinding.php#ga106e6fcd764d17be682faf7a5bc95720"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#gac02ee8f7606382ea7855ae4e1656ed0f">hwloc_get_area_membind</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, const void *addr, size_t len, <a class="el" href="group__hwlocality__sets.php#ga4bbf39b68b6f568fb92739e7c0ea7801">hwloc_cpuset_t</a> cpuset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> *policy, int flags)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Query the CPUs near the NUMA node(s) and binding policy of the memory identified by (<code>addr</code>, <code>len</code> ).  <a href="group__hwlocality__membinding.php#gac02ee8f7606382ea7855ae4e1656ed0f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#gac5586e58cf25c3596b7d4aa31ce13259">hwloc_alloc</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, size_t len)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate some memory.  <a href="group__hwlocality__membinding.php#gac5586e58cf25c3596b7d4aa31ce13259"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#gaeaa00714a9c4319bda0a74ca6f8720e8">hwloc_alloc_membind_nodeset</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, size_t len, <a class="el" href="group__hwlocality__sets.php#ga2f5276235841ad66a79bedad16a5a10c">hwloc_const_nodeset_t</a> nodeset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> policy, int flags) </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate some memory on the given nodeset <code>nodeset</code>.  <a href="group__hwlocality__membinding.php#gaeaa00714a9c4319bda0a74ca6f8720e8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#ga221a7edc5d436300374fa16463f607e5">hwloc_alloc_membind</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, size_t len, <a class="el" href="group__hwlocality__sets.php#ga1f784433e9b606261f62d1134f6a3b25">hwloc_const_cpuset_t</a> cpuset, <a class="el" href="group__hwlocality__membinding.php#gac9764f79505775d06407b40f5e4661e8">hwloc_membind_policy_t</a> policy, int flags) </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate some memory on memory nodes near the given cpuset <code>cpuset</code>.  <a href="group__hwlocality__membinding.php#ga221a7edc5d436300374fa16463f607e5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"> int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__hwlocality__membinding.php#ga986d9b4cc76da592c4b937c6cb7d9d56">hwloc_free</a> (<a class="el" href="group__hwlocality__topology.php#ga9d1e76ee15a7dee158b786c30b6a6e38">hwloc_topology_t</a> topology, void *addr, size_t len)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Free memory that was previously allocated by <a class="el" href="group__hwlocality__membinding.php#gac5586e58cf25c3596b7d4aa31ce13259" title="Allocate some memory.">hwloc_alloc()</a> or <a class="el" href="group__hwlocality__membinding.php#ga221a7edc5d436300374fa16463f607e5" title="Allocate some memory on memory nodes near the given cpuset cpuset.">hwloc_alloc_membind()</a>.  <a href="group__hwlocality__membinding.php#ga986d9b4cc76da592c4b937c6cb7d9d56"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>The hwloc API. </p>
<p>See <a class="el" href="bitmap_8h.php" title="The bitmap API, for use in hwloc itself.">hwloc/bitmap.h</a> for bitmap specific macros. See <a class="el" href="helper_8h.php" title="High-level hwloc traversal helpers.">hwloc/helper.h</a> for high-level topology traversal helpers. </p>
</div></div>
<?php
include_once("$topdir/includes/footer.inc");
